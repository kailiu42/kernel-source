Git-commit: ec02feff173db21bc769d0f4f3f2f011616cca3c
From: Cheng Jian <cj.chengjian@huawei.com>
Date: Mon, 25 Jan 2021 10:08:25 +0800
Subject: [PATCH] kretprobe: check re-registration of the same kretprobe
 earlier
Patch-mainline: Queued in openEuler repo, version 5.10.0-2.0.0
References: openEuler-21.03
Git-repo: https://gitee.com/openeuler/kernel.git

hulk inclusion
category: bugfix
bugzilla: 47256
CVE: NA

---------------------------

Our system encountered a use-after-free when re-register the same
kretprobe, it access the kretprobe_instance in rp->free_instances
which has been released already.

Prevent re-registration has been implemented for kprobe before, but
it's too late for kretprobe. We must check the re-registration before
re-initializing the kretprobe, otherwise it will destroy the data and
struct of the kretprobe registered, it can lead to use-after-free,
memory leak, system crash, and even other unexpected behaviors.

Use check_kprobe_rereg() to check re-registration, also give a warning
message.

v2: cherry pick and merge WARN_ON bugfix commit
6ca427f53643100fdb795bd88073fd7bba256702.

Link: https://lkml.org/lkml/2020/3/6/167
Signed-off-by: Cheng Jian <cj.chengjian@huawei.com>
Acked-by: Masami Hiramatsu <mhiramat@kernel.org>
Reviewed-by: Xie XiuQi <xiexiuqi@huawei.com>
Signed-off-by: yangerkun <yangerkun@huawei.com>
Signed-off-by: Li Huafei <lihuafei1@huawei.com>
Reviewed-by: Cheng Jian <cj.chengjian@huawei.com>
Signed-off-by: Zheng Zengkai <zhengzengkai@huawei.com>
Signed-off-by: Kai Liu <kai.liu@suse.com>
---
 kernel/kprobes.c | 5 +++++
 1 file changed, 5 insertions(+)

diff --git a/kernel/kprobes.c b/kernel/kprobes.c
index 41fdbb7953c6..c72cd648c42e 100644
--- a/kernel/kprobes.c
+++ b/kernel/kprobes.c
@@ -2117,6 +2117,11 @@ int register_kretprobe(struct kretprobe *rp)
 		}
 	}
 
+	/* Return error if it's being re-registered. */
+	ret = check_kprobe_rereg(&rp->kp);
+	if (ret)
+		return ret;
+
 	rp->kp.pre_handler = pre_handler_kretprobe;
 	rp->kp.post_handler = NULL;
 	rp->kp.fault_handler = NULL;
-- 
2.31.1

