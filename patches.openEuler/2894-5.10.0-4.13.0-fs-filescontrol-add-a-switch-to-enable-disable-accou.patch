Git-commit: bf8f0cc2c8eed53baae0a3d5fac4e71a19f44fd0
From: Yu Kuai <yukuai3@huawei.com>
Date: Wed, 17 Mar 2021 20:56:36 +0800
Subject: [PATCH] fs/filescontrol: add a switch to enable / disable accounting
 of open fds
Patch-mainline: Queued in openEuler repo, version 5.10.0-4.13.0
References: openEuler-21.03
Git-repo: https://gitee.com/openeuler/kernel.git

hulk inclusion
category: bugfix
bugzilla: 50779
CVE: NA

---------------------------

Such switch can only set the accounting of open fds in filescontrol from
enable to disable. If it is disabled arealdy, the switch can't enable it.

The counter is enabled by default, and it can be disabled by:
a. echo 1 > /sys/fs/cgroup/files/files.no_acct
b. add "filescontrol.no_acct=1" to boot cmd

Signed-off-by: Yu Kuai <yukuai3@huawei.com>
Reviewed-by: Hou Tao <houtao1@huawei.com>
Reviewed-by: zhangyi (F) <yi.zhang@huawei.com>
Signed-off-by: Yang Yingliang <yangyingliang@huawei.com>

Signed-off-by: Lu Jialin <lujialin4@huawei.com>
Reviewed-by: Xiu Jianfeng <xiujianfeng@huawei.com>
Signed-off-by: Zheng Zengkai <zhengzengkai@huawei.com>
Signed-off-by: Kai Liu <kai.liu@suse.com>
---
 fs/filescontrol.c | 30 +++++++++++++++++++++++++++---
 1 file changed, 27 insertions(+), 3 deletions(-)

diff --git a/fs/filescontrol.c b/fs/filescontrol.c
index 1d2d29127fd4..a24be705f621 100644
--- a/fs/filescontrol.c
+++ b/fs/filescontrol.c
@@ -25,14 +25,17 @@
 #include <linux/seq_file.h>
 #include <linux/fdtable.h>
 #include <linux/sched/signal.h>
+#include <linux/module.h>
 
 #define FILES_MAX ULLONG_MAX
 #define FILES_MAX_STR "max"
 
-
+static bool no_acct;
 struct cgroup_subsys files_cgrp_subsys __read_mostly;
 EXPORT_SYMBOL(files_cgrp_subsys);
 
+module_param(no_acct, bool, 0444);
+
 struct files_cgroup {
 	struct cgroup_subsys_state css;
 	struct page_counter open_handles;
@@ -194,7 +197,7 @@ int files_cgroup_alloc_fd(struct files_struct *files, u64 n)
 	 *  we don't charge their fds, only issue is that files.usage
 	 *  won't be accurate in root files cgroup.
 	 */
-	if (files != &init_files) {
+	if (!no_acct && files != &init_files) {
 		struct page_counter *fail_res;
 		struct files_cgroup *files_cgroup =
 			files_cgroup_from_files(files);
@@ -212,7 +215,7 @@ void files_cgroup_unalloc_fd(struct files_struct *files, u64 n)
 	 * It's not charged so no need to uncharge, see comments in
 	 * files_cgroup_alloc_fd.
 	 */
-	if (files != &init_files) {
+	if (!no_acct && files != &init_files) {
 		struct files_cgroup *files_cgroup =
 		       files_cgroup_from_files(files);
 		page_counter_uncharge(&files_cgroup->open_handles, n);
@@ -220,6 +223,21 @@ void files_cgroup_unalloc_fd(struct files_struct *files, u64 n)
 }
 EXPORT_SYMBOL(files_cgroup_unalloc_fd);
 
+static u64 files_disabled_read(struct cgroup_subsys_state *css,
+			       struct cftype *cft)
+{
+	return no_acct;
+}
+
+static int files_disabled_write(struct cgroup_subsys_state *css,
+				    struct cftype *cft, u64 val)
+{
+	if (!val)
+		return -EINVAL;
+	no_acct = true;
+
+	return 0;
+}
 
 static int files_limit_read(struct seq_file *sf, void *v)
 {
@@ -281,6 +299,12 @@ static struct cftype files[] = {
 		.name = "usage",
 		.read_u64 = files_usage_read,
 	},
+	{
+		.name = "no_acct",
+		.flags = CFTYPE_ONLY_ON_ROOT,
+		.read_u64 = files_disabled_read,
+		.write_u64 = files_disabled_write,
+	},
 	{ }
 };
 
-- 
2.31.1

