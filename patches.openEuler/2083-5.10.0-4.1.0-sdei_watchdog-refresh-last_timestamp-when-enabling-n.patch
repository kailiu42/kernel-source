Git-commit: 14d70ff4654be562a9dd7b53964e0f08da3fa30a
From: Xiongfeng Wang <wangxiongfeng2@huawei.com>
Date: Sat, 20 Feb 2021 11:00:59 +0800
Subject: [PATCH] sdei_watchdog: refresh 'last_timestamp' when enabling
 nmi_watchdog
Patch-mainline: Queued in openEuler repo, version 5.10.0-4.1.0
References: openEuler-21.03
Git-repo: https://gitee.com/openeuler/kernel.git

hulk inclusion
category: feature
bugzilla: 48046
CVE: NA

-------------------------------------------------------------------------

The trigger period of secure time is set by firmware. We need to check
the time_stamp every time the secure time fires to make sure the
hardlockup detection is not executed too soon. We need to refresh
'last_timestamp' to the current time when we enable the nmi_watchdog.
Otherwise, false hardlockup may be detected when the secure timer fires
the first time.

Signed-off-by: Xiongfeng Wang <wangxiongfeng2@huawei.com>
Reviewed-by: Hanjun Guo <guohanjun@huawei.com>
Signed-off-by: Yang Yingliang <yangyingliang@huawei.com>
Signed-off-by: Xiongfeng Wang <wangxiongfeng2@huawei.com>
Signed-off-by: Zheng Zengkai <zhengzengkai@huawei.com>
Signed-off-by: Kai Liu <kai.liu@suse.com>
---
 arch/arm64/kernel/watchdog_sdei.c | 2 ++
 include/linux/nmi.h               | 1 +
 kernel/watchdog_hld.c             | 9 +++++++++
 3 files changed, 12 insertions(+)

diff --git a/arch/arm64/kernel/watchdog_sdei.c b/arch/arm64/kernel/watchdog_sdei.c
index a2154aa6f27a..e36c4d398893 100644
--- a/arch/arm64/kernel/watchdog_sdei.c
+++ b/arch/arm64/kernel/watchdog_sdei.c
@@ -30,6 +30,8 @@ int watchdog_nmi_enable(unsigned int cpu)
 	if (!sdei_watchdog_registered)
 		return -EINVAL;
 
+	refresh_hld_last_timestamp();
+
 	ret = sdei_api_event_enable(sdei_watchdog_event_num);
 	if (ret) {
 		pr_err("Enable NMI Watchdog failed on cpu%d\n",
diff --git a/include/linux/nmi.h b/include/linux/nmi.h
index a11a12d5e3e8..a7d817b5fa84 100644
--- a/include/linux/nmi.h
+++ b/include/linux/nmi.h
@@ -206,6 +206,7 @@ u64 hw_nmi_get_sample_period(int watchdog_thresh);
 #if defined(CONFIG_HARDLOCKUP_CHECK_TIMESTAMP) && \
     defined(CONFIG_HARDLOCKUP_DETECTOR)
 void watchdog_update_hrtimer_threshold(u64 period);
+void refresh_hld_last_timestamp(void);
 #else
 static inline void watchdog_update_hrtimer_threshold(u64 period) { }
 #endif
diff --git a/kernel/watchdog_hld.c b/kernel/watchdog_hld.c
index 76ac86caa50f..88f5c314a1df 100644
--- a/kernel/watchdog_hld.c
+++ b/kernel/watchdog_hld.c
@@ -89,6 +89,15 @@ static bool watchdog_check_timestamp(void)
 	__this_cpu_write(last_timestamp, now);
 	return true;
 }
+
+void refresh_hld_last_timestamp(void)
+{
+	ktime_t now;
+
+	now = ktime_get_mono_fast_ns();
+	__this_cpu_write(last_timestamp, now);
+
+}
 #else
 static inline bool watchdog_check_timestamp(void)
 {
-- 
2.31.1

