Patch-mainline: Never, in PREEMPT_RT repository
References: PREEMPT_RT
Acked-by: Kai Liu <kai.liu@suse.com>
Subject: locking/local_lock: Add RT support
From: Thomas Gleixner <tglx@linutronix.de>
Date: Tue Apr 13 23:34:56 2021 +0200

From: Thomas Gleixner <tglx@linutronix.de>

On PREEMPT_RT enabled kernels local_lock has a real spinlock
inside. Provide the necessary macros to substitute the non-RT variants.

Signed-off-by: Thomas Gleixner <tglx@linutronix.de>


---
 include/linux/local_lock_internal.h | 55 ++++++++++++++++++++++++++++++++++++++-
 1 file changed, 55 insertions(+)
---
diff --git a/include/linux/local_lock_internal.h b/include/linux/local_lock_internal.h
index 0574e4687d63..f39fb2806164 100644
--- a/include/linux/local_lock_internal.h
+++ b/include/linux/local_lock_internal.h
@@ -6,6 +6,8 @@
 #include <linux/percpu-defs.h>
 #include <linux/lockdep.h>
 
+#ifndef CONFIG_PREEMPT_RT
+
 typedef struct {
 #ifdef CONFIG_DEBUG_LOCK_ALLOC
 	struct lockdep_map	dep_map;
@@ -63,6 +65,59 @@ static inline void local_lock_release(local_lock_t *l) { }
 #define ll_local_irq_save(flags)	local_irq_save(flags)
 #define ll_local_irq_restore(flags)	local_irq_restore(flags)
 
+#else /* !CONFIG_PREEMPT_RT */
+
+/*
+ * The preempt RT mapping of local locks: a spinlock.
+ */
+typedef struct {
+	spinlock_t		lock;
+} local_lock_t;
+
+#define INIT_LOCAL_LOCK(lockname)	{	\
+	__SPIN_LOCK_UNLOCKED((lockname).lock),	\
+	}
+
+#define __local_lock_init(l)					\
+do {								\
+	spin_lock_init(&(l)->lock);				\
+} while (0)
+
+static inline void local_lock_acquire(local_lock_t *l)
+{
+	spin_lock(&l->lock);
+}
+
+static inline void local_lock_release(local_lock_t *l)
+{
+	spin_unlock(&l->lock);
+}
+
+/*
+ * On RT enabled kernels the serialization is guaranteed by the spinlock in
+ * local_lock_t, so the only guarantee to make is to not leave the CPU.
+ */
+#define ll_preempt_disable()		migrate_disable()
+#define ll_preempt_enable()		migrate_enable()
+#define ll_local_irq_disable()		migrate_disable()
+#define ll_local_irq_enable()		migrate_enable()
+
+#define ll_local_irq_save(flags)			\
+	do {						\
+		typecheck(unsigned long, flags);	\
+		flags = 0;				\
+		migrate_disable();			\
+	} while (0)
+
+#define ll_local_irq_restore(flags)			\
+	do {						\
+		typecheck(unsigned long, flags);	\
+		(void)flags;				\
+		migrate_enable();			\
+	} while (0)
+
+#endif /* CONFIG_PREEMPT_RT */
+
 #define __local_lock(lock)					\
 	do {							\
 		ll_preempt_disable();				\
